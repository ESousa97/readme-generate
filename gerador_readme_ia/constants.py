# gerador_readme_ia/constants.py

# ---------------------------------------------------------------------
# Configura√ß√µes gerais da aplica√ß√£o
# ---------------------------------------------------------------------

APP_NAME = "GeradorREADME"
APP_DISPLAY_NAME = "Gerador de README.md Inteligente"  # Display name usado na GUI
APP_AUTHOR = "Enoquesousa"
APP_VERSION = "1.0.1"

# Modelo Gemini padr√£o para chamadas de IA
DEFAULT_GEMINI_MODEL = "gemini-2.0-flash"

# Arquivo de configura√ß√£o para chaves e prefer√™ncias
CONFIG_FILE_NAME = "settings_readme_generator.ini"
CONFIG_SECTION_API = "API_Gemini"
CONFIG_KEY_API_KEY = "google_api_key"
CONFIG_KEY_MODEL = "gemini_model"

# ---------------------------------------------------------------------
# PROMPTS HIPER-DETALHADOS PARA README.md - INTEGRADO COM GUI
# ---------------------------------------------------------------------

PROMPTS: dict[str, str] = {

    # -----------------------------------------------------------------
    # 1. PROFISSIONAL ‚Äî Padr√£o corporativo (consultorias, fintechs, etc.)
    # -----------------------------------------------------------------
    "profissional": r"""
Voc√™ √© um arquiteto de software s√™nior, especialista em documentar solu√ß√µes corporativas.  
Use exatamente **15 se√ß√µes** na ordem listada abaixo. N√£o adicione nem remova itens.

## REGRAS GERAIS DE FORMATA√á√ÉO
1. Idioma principal: **Portugu√™s (Brasil)**; manter termos t√©cnicos em **ingl√™s**.  
2. Cabe√ßalhos: `<h1>` = `#`, `<h2>` = `##`, `<h3>` = `###`.  
3. C√≥digos e comandos:  
   - Terminal: ```bash  
   pip install ...  
   ```  
   - Blocos de c√≥digo: ```python ...```.  
4. Tabelas: Markdown nativo, sem HTML.  
5. Listas longas (>5 itens): encapsular em `<details><summary>Mostrar Mais</summary>
- item1
- item2
</details>`.  
6. Badges: use `![label](https://img.shields.io/badge/label-value-color)`.  
7. Quebra de linha: m√°ximo 100 caracteres.

---

### 1. T√çTULO DO PROJETO
- `<h1>` com 3‚Äì8 palavras, iniciando com verbo de a√ß√£o ou substantivo forte.
- Exemplo: `# Plataforma de Pagamentos - API RESTful`

### 2. VIS√ÉO EXECUTIVA
- Par√°grafo √∫nico (‚â§120 palavras) respondendo:
  1. O que √©?  
  2. Por que existe?  
  3. Qual √© o valor de neg√≥cio?

### 3. STATUS & ROADMAP
- Status atual: `![status](https://img.shields.io/badge/status-em_desenvolvimento-yellow)`  
- Tabela:
  | Vers√£o | Data       | Status      | Observa√ß√£o                    |
  |--------|------------|-------------|-------------------------------|
  | 0.1.0  | 2025-01-10 | Em desenvolvimento | In√≠cio do projeto        |
- `<details>` com roadmap (3‚Äì6 marcos com data e descri√ß√£o curta).

### 4. BADGES
- Linha √∫nica: Build | Coverage | License | Issues | Releases
- Exemplo: `![build](https://img.shields.io/badge/build-passing-brightgreen) ![coverage](https://img.shields.io/badge/coverage-85%25-green) ![license](https://img.shields.io/badge/license-MIT-blue)`

### 5. ARQUITETURA & TECNOLOGIAS
- Tabela com **colunas fixas**: Componente | Tech / Vers√£o | Observa√ß√£o
- Exemplo:
  | Componente | Tecnologia        | Observa√ß√£o               |
  |------------|-------------------|--------------------------|
  | Backend    | Python 3.12, FastAPI | Servidor HTTP e REST   |

### 6. DIAGRAMA DE PASTAS
- √Årvore de diret√≥rios (‚â§3 n√≠veis) anotada com `# coment√°rio`.
```text
src/
‚îú‚îÄ‚îÄ api/            # endpoints REST
‚îÇ   ‚îú‚îÄ‚îÄ v1/         # vers√£o est√°vel
‚îÇ   ‚îî‚îÄ‚îÄ deps.py     # depend√™ncias globais
‚îî‚îÄ‚îÄ core/           # l√≥gica de neg√≥cio
```

### 7. PR√â-REQUISITOS
- Lista numerada:
  1. Git >=2.30 ‚Äî `https://git-scm.com`  
  2. Python >=3.12 ‚Äî `https://python.org`  
  3. Docker ‚Äî `https://docker.com`  

### 8. INSTALA√á√ÉO
1. **Clonar**: `git clone https://github.com/usuario/projeto.git`  
2. **Virtualenv**: ```bash
python -m venv .venv
source .venv/bin/activate  # Linux/Mac
# ou .venv\Scripts\activate  # Windows
```  
3. **Depend√™ncias**: `pip install -r requirements.txt`  
4. **Configurar vars**: tabela VAR | DESCRI√á√ÉO | DEFAULT
  | VAR              | DESCRI√á√ÉO                | DEFAULT        |
  |------------------|---------------------------|----------------|
  | DATABASE_URL     | URL do banco de dados    | sqlite:///db.sqlite|

### 9. EXECU√á√ÉO
- Hello World: `uvicorn main:app --reload`  
- Tabela de comandos:
  | A√ß√£o                | CLI                                |
  |---------------------|------------------------------------|
  | Iniciar servidor    | `uvicorn main:app`                 |
  | Rodar testes        | `pytest tests/`                    |

### 10. USO DA API / APLICA√á√ÉO
- API: Exemplo de `curl`:
```bash
curl -X GET https://api.example.com/v1/items \
  -H "Authorization: Bearer TOKEN"
```  
- Resposta JSON formatada.

### 11. TESTES & QUALIDADE
- Unit: `pytest --maxfail=1 --disable-warnings -q`  
- Integration: `pytest integration/`  
- Lint: `flake8 src/`  
- Crit√©rio: Coverage ‚â•90%, zero lint errors.

### 12. OBSERVABILIDADE
- Logs: Structured logs em `logs/`  
- Tracing: Jaeger no endpoint `/trace`  
- M√©tricas: Prometheus export em `/metrics`

### 13. CONTRIBUI√á√ÉO & GOVERNAN√áA
- GitFlow resumido:
  1. `feature/*`, `hotfix/*`, `release/*`  
  2. PR: descri√ß√£o, testes, reviewers obrigat√≥rios.  
- Links: `[CONTRIBUTING.md](./CONTRIBUTING.md)`, `[CODE_OF_CONDUCT.md](./CODE_OF_CONDUCT.md)`

### 14. LICEN√áA
- `![license](https://img.shields.io/badge/license-MIT-blue)` MIT License ‚Äî veja `LICENSE`

### 15. AUTORES & CONTATO
- Tabela:
  | Nome            | Fun√ß√£o               | LinkedIn / GitHub        |
  |-----------------|----------------------|--------------------------|
  | Desenvolvedor   | Autor principal      | @usuario                 |

**Dados do projeto extra√≠dos:**
{project_data}

> **Gere apenas o conte√∫do do README.md**, seguindo estritamente estas instru√ß√µes.
""",

    # -----------------------------------------------------------------
    # 2. DETALHADO ‚Äî Documenta√ß√£o acad√™mica / t√©cnica
    # -----------------------------------------------------------------
    "detalhado": r"""
Voc√™ √© um redator t√©cnico especialista em documenta√ß√£o acad√™mica e cient√≠fica.
Gere um README.md **exaustivo** com **18 se√ß√µes** numeradas seguindo rigorosamente a estrutura abaixo.

## DIRETRIZES DE FORMATA√á√ÉO
- M√°ximo 120 chars por linha.  
- Tabelas em Markdown nativo.  
- Blocos de c√≥digo com linguagem identificada.
- Citations com formato: `> **Refer√™ncia:** [Fonte](URL)`
- Use blocos `> ‚ö†Ô∏è **Aten√ß√£o:** texto` para avisos importantes
- Use blocos `> üí° **Dica:** texto` para dicas √∫teis

**Dados do projeto para an√°lise:**
{project_data}

## ESTRUTURA OBRIGAT√ìRIA

### 1. T√çTULO & ABSTRACT
- `<h1>` com nome cient√≠fico/t√©cnico do projeto
- **Abstract** (‚â§150 palavras) resumindo: objetivo, metodologia, resultados esperados

### 2. √çNDICE
- Auto-links com `[texto](#ancora)` para todas as se√ß√µes principais
- Use `-` para sub-itens

### 3. CONTEXTO & MOTIVA√á√ÉO
- Problema que o projeto resolve
- Estado da arte / trabalhos relacionados
- Justificativa t√©cnica e cient√≠fica
- Objetivos espec√≠ficos (3-5 itens)

### 4. METODOLOGIA / ARQUITETURA
- Descri√ß√£o detalhada da abordagem t√©cnica
- Diagramas conceituais (texto ASCII se necess√°rio)
- Algoritmos principais
- Padr√µes de design utilizados

### 5. DEPEND√äNCIAS DETALHADAS
- Tabela completa com vers√µes, licen√ßas e justificativas
- Incluir hashes se existir lockfile
- Depend√™ncias opcionais e suas finalidades

### 6. AMBIENTE DE EXECU√á√ÉO
- Requisitos de hardware (CPU, RAM, disco)
- Sistemas operacionais suportados
- Vers√µes de runtime (Python, Node, JVM, etc.)
- Configura√ß√µes de Docker/Containers

### 7. INSTALA√á√ÉO PASSO-A-PASSO
- Procedimento detalhado para desenvolvimento
- Procedimento para produ√ß√£o
- Troubleshooting de problemas comuns
- Verifica√ß√£o da instala√ß√£o

### 8. ESTRUTURA COMPLETA DO PROJETO
- √Årvore de diret√≥rios (profundidade 4)
- Descri√ß√£o de cada m√≥dulo/pacote
- Conven√ß√µes de nomenclatura
- Padr√µes arquiteturais

### 9. CONFIGURA√á√ÉO AVAN√áADA
- Todas as vari√°veis de ambiente
- Arquivos de configura√ß√£o
- Flags de performance tuning
- Configura√ß√µes de seguran√ßa

### 10. GUIA DE EXECU√á√ÉO
- Modo desenvolvimento (debug)
- Modo produ√ß√£o
- Profiles/ambientes diferentes
- Monitoramento e logs

### 11. EXEMPLOS DE USO DETALHADOS
- Pelo menos 3 exemplos pr√°ticos
- Casos de uso do mundo real
- Code snippets comentados
- Sa√≠das esperadas

### 12. BENCHMARK & RESULTADOS
- M√©tricas de performance
- Compara√ß√µes com alternativas
- Gr√°ficos de resultado (ASCII ou descri√ß√£o)
- An√°lise de complexidade

### 13. TESTES & COBERTURA
- Estrat√©gia de testes (unit√°rios, integra√ß√£o, e2e)
- Como executar cada tipo de teste
- Relat√≥rios de cobertura
- M√©tricas de qualidade

### 14. LIMITA√á√ïES CONHECIDAS
- Restri√ß√µes t√©cnicas atuais
- Limita√ß√µes de escala
- Casos de uso n√£o suportados
- Workarounds conhecidos

### 15. ROADMAP & PR√ìXIMOS PASSOS
- Funcionalidades planejadas (com datas)
- Melhorias de performance
- Refatora√ß√µes previstas
- Chamada para contribui√ß√µes

### 16. PUBLICA√á√ïES & CITA√á√ïES
- Papers relacionados
- Como citar este projeto
- Formato BibTeX se aplic√°vel
- Apresenta√ß√µes e demos

### 17. AGRADECIMENTOS & CR√âDITOS
- Colaboradores
- Institui√ß√µes de apoio
- Projetos que inspiraram
- Ferramentas utilizadas

### 18. LICEN√áA & AUTORES
- Detalhes completos da licen√ßa
- Direitos de uso e distribui√ß√£o
- Informa√ß√µes de contato dos autores
- Como reportar issues

> ‚ö†Ô∏è **Aten√ß√£o:** Incluir requisitos de hardware detalhados se aplic√°vel.
> üí° **Dica:** Linkar documentos cient√≠ficos relevantes quando dispon√≠veis.

**Gere o README completo seguindo esta estrutura rigorosamente.**
""",

    # -----------------------------------------------------------------
    # 3. MINIMALISTA ‚Äî Startup / PoC "Less is more"
    # -----------------------------------------------------------------
    "minimalista": r"""
Voc√™ √© um especialista em UX Writing e minimalismo digital.
Produza um README.md **conciso e impactante** com exatamente **6 se√ß√µes**.

## PRINC√çPIOS MINIMALISTAS
- M√°ximo 80 caracteres por linha
- Zero redund√¢ncia
- Foco no essencial
- Linguagem direta e objetiva
- Visual limpo e escane√°vel

**Dados do projeto:**
{project_data}

## ESTRUTURA FIXA (6 SE√á√ïES)

### 1. T√çTULO IMPACTANTE
- M√°ximo 5 palavras
- Verbo de a√ß√£o + substantivo forte
- Exemplo: `# Payments Made Simple`

### 2. PITCH ELEVATOR
- Uma √∫nica frase (‚â§20 palavras)
- Responde: O que faz? Para quem? Por que usar?
- Exemplo: "API que processa pagamentos globais em 50ms com 99.99% uptime."

### 3. STACK TECNOL√ìGICA
- Formato: `Tech1 ‚Ä¢ Tech2 ‚Ä¢ Tech3`
- M√°ximo 6 tecnologias principais
- Exemplo: `Python ‚Ä¢ FastAPI ‚Ä¢ PostgreSQL ‚Ä¢ Redis ‚Ä¢ Docker ‚Ä¢ AWS`

### 4. QUICK START
- Exatamente 3 comandos
- Do clone ao running
- Exemplo:
```bash
git clone repo-url
pip install -r requirements.txt
python main.py
```

### 5. DEMO
- Screenshot ou GIF se pasta `docs/img` existir
- Link para demo online se dispon√≠vel
- Exemplo: `![demo](docs/demo.gif)` ou `üöÄ [Try it live](https://demo.url)`

### 6. LICEN√áA MINIMAL
- Formato: `MIT ‚Ä¢ [View License](LICENSE)`
- Ou apenas: `¬© 2024 Author ‚Ä¢ MIT License`

**REGRAS R√çGIDAS:**
- Zero badges desnecess√°rios
- Zero se√ß√µes extras
- Zero explica√ß√µes longas
- Zero jarg√£o t√©cnico
- Priorizar a√ß√£o sobre descri√ß√£o

**Gere apenas estas 6 se√ß√µes, seguindo o princ√≠pio "less is more".**
""",

    # -----------------------------------------------------------------
    # 4. TUTORIAL ‚Äî Workshop r√°pido (15‚Äì30min)
    # -----------------------------------------------------------------
    "tutorial": r"""
Voc√™ √© um instrutor t√©cnico experiente, especialista em criar tutoriais pr√°ticos e did√°ticos.
Crie um README.md **tutorial passo-a-passo** com **8 se√ß√µes** principais.

## FILOSOFIA TUTORIAL
- Aprender fazendo (hands-on)
- Do zero ao funcionando em 30 minutos
- Explica√ß√µes claras para iniciantes
- Checkpoints de valida√ß√£o
- Progress√£o incremental

**Dados do projeto para tutorial:**
{project_data}

## ESTRUTURA DO TUTORIAL

### 1. üéØ OBJETIVOS DO TUTORIAL
- Lista exata do que o usu√°rio vai aprender
- Tempo estimado: XX minutos
- Pr√©-requisitos m√≠nimos
- O que voc√™ ter√° ao final

**Exemplo:**
> Ao final deste tutorial voc√™ ter√°:
> ‚úÖ Uma aplica√ß√£o funcionando localmente
> ‚úÖ Conhecimento das principais funcionalidades
> ‚úÖ Base para customiza√ß√µes futuras

### 2. ‚òëÔ∏è PR√â-REQUISITOS & CHECKLIST
- Lista de verifica√ß√£o interativa
- Links para instala√ß√£o de ferramentas
- Como verificar se est√° tudo certo

**Formato:**
- [ ] Git instalado (`git --version`)
- [ ] Python 3.8+ (`python --version`)
- [ ] Editor de c√≥digo (VS Code, PyCharm, etc.)

### 3. üöÄ CONFIGURA√á√ÉO DO AMBIENTE
- Passo-a-passo detalhado
- Comandos exatos para copiar/colar
- Verifica√ß√£o se cada etapa funcionou

**Estrutura:**
```bash
# Passo 1: Clone o reposit√≥rio
git clone [URL]
cd [projeto]

# Passo 2: Ambiente virtual
python -m venv tutorial-env
# ativa√ß√£o espec√≠fica por OS
```

### 4. üìö TUTORIAL PASSO-A-PASSO
**4.1 Primeiro Contato**
- Hello World do projeto
- Comando inicial mais simples
- Verifica√ß√£o se funcionou

**4.2 Configura√ß√£o B√°sica**
- Arquivos de configura√ß√£o essenciais
- Vari√°veis de ambiente m√≠nimas
- Teste de conectividade

**4.3 Funcionalidade Core**
- Implementar uma feature b√°sica
- Exemplo pr√°tico e √∫til
- Explica√ß√£o do que aconteceu

**4.4 Customiza√ß√£o Inicial**
- Como adaptar para suas necessidades
- Par√¢metros principais
- Exemplo de modifica√ß√£o

**4.5 Deploy Local**
- Como rodar em produ√ß√£o local
- Verifica√ß√µes de sa√∫de
- Acesso via browser/cliente

### 5. üéÆ DESAFIOS PR√ÅTICOS
- 3 exerc√≠cios incrementais
- Com solu√ß√µes comentadas
- Varia√ß√µes para praticar

**Exemplo:**
> **Desafio 1:** Adicione um novo endpoint `/health`
> **Dica:** Use o padr√£o dos endpoints existentes
> <details><summary>Solu√ß√£o</summary>c√≥digo aqui</details>

### 6. ‚ùì FAQ & TROUBLESHOOTING
- Pelo menos 5 problemas comuns
- Solu√ß√µes pr√°ticas testadas
- Como pedir ajuda

**Formato:**
> **P: Erro "Module not found"**  
> **R:** Verifique se o ambiente virtual est√° ativo...

### 7. üìñ PR√ìXIMOS PASSOS
- Documenta√ß√£o avan√ßada
- Recursos para aprender mais
- Comunidade e suporte
- Projetos relacionados

### 8. üèÜ CERTIFICADO & CR√âDITOS
- Como compartilhar o que aprendeu
- Badge de conclus√£o (se aplic√°vel)
- Cr√©ditos e licen√ßa
- Como contribuir de volta

**ELEMENTOS OBRIGAT√ìRIOS:**
- Emojis para facilitar escaneamento
- Blocos `> ‚ö†Ô∏è Aten√ß√£o` para erros comuns
- Checkboxes interativos
- Code snippets testados
- Estimativas de tempo realistas

**Gere um tutorial completo, pr√°tico e did√°tico.**
""",

    # -----------------------------------------------------------------
    # 5. OPEN_SOURCE ‚Äî Comunidade e colabora√ß√£o
    # -----------------------------------------------------------------
    "open_source": r"""
Voc√™ √© um maintainer experiente de projetos open source, especialista em construir comunidades.
Estruture um README.md **focado em colabora√ß√£o e comunidade** com **12 se√ß√µes**.

## FILOSOFIA OPEN SOURCE
- Acolhimento para novos contribuidores
- Transpar√™ncia total do projeto
- Processos claros de contribui√ß√£o
- Reconhecimento da comunidade
- Sustentabilidade de longo prazo

**Dados do projeto open source:**
{project_data}

## ESTRUTURA COLABORATIVA

### 1. üåü VIS√ÉO GERAL & IMPACT
- Badge strip: ![Stars](badge) ![Forks](badge) ![Contributors](badge) ![License](badge)
- **TL;DR** em 30 palavras ou menos
- **Impact statement**: quantos usu√°rios, downloads, casos de uso
- **Community stats**: contribuidores ativos, issues resolvidas

### 2. ‚ö° DEMO INTERATIVO
- GIF animado ou screenshot impactante
- Link para demo ao vivo
- Playground/sandbox se dispon√≠vel
- Exemplo de uso em 30 segundos

### 3. ‚ú® FEATURES & ROADMAP
- Features principais com ‚úÖ implemented ou üöß in progress
- **Public roadmap** linkado (GitHub Projects, Trello, etc.)
- **Community wishlist** - como sugerir features
- **Breaking changes** e versionamento sem√¢ntico

### 4. üöÄ QUICK START FRIENDLY
- **Zero to hero** em 3 comandos
- **Docker one-liner** se dispon√≠vel
- **Cloud deployment** com um clique
- Links para tutorials detalhados

### 5. ‚öôÔ∏è CONFIGURA√á√ÉO FLEX√çVEL
- Tabela completa de environment variables
- Exemplos de `.env.example`
- Configura√ß√µes para diferentes ambientes
- **Configuration wizard** se existir

### 6. üõ†Ô∏è SCRIPTS DE DESENVOLVIMENTO
- Makefile ou package.json scripts
- Comandos para lint, test, build, deploy
- **Development shortcuts** e aliases √∫teis
- **IDE configurations** (VS Code, etc.)

### 7. ü§ù GUIA DE CONTRIBUI√á√ÉO
- **First time contributors welcome!**
- Como fazer fork e abrir PR
- **Good first issues** com labels
- Code style e standards
- **Review process** transparente

### 8. üìã C√ìDIGO DE CONDUTA
- Link para CODE_OF_CONDUCT.md completo
- **Values** da comunidade em bullets
- Como reportar problemas de comportamento
- **Inclusive language** guidelines

### 9. üóìÔ∏è RELEASES & CHANGELOG
- **Semantic versioning** explicado
- Link para CHANGELOG.md detalhado
- **Release notes** automatizadas
- **Migration guides** entre vers√µes

### 10. üí¨ COMUNIDADE & SUPORTE
- **Discord/Slack/Telegram** links
- **GitHub Discussions** ou forum
- **Stack Overflow** tags
- **Office hours** ou call schedules
- **Community call** recordings

### 11. üèÜ RECONHECIMENTOS
- **Hall of fame** dos top contributors
- **Sponsors** e financial supporters
- **Built with** - projetos que usam este
- **Inspiration** - projetos que inspiraram

### 12. üìÑ LICEN√áA & GOVERNANCE
- **License** clara com badge
- **Governance model** (BDFL, committee, etc.)
- **Decision making process**
- **Project sustainability** e funding

**ELEMENTOS ESPECIAIS OPEN SOURCE:**
- Tom acolhedor e inclusivo (2¬™ pessoa: "voc√™")
- Links para `CONTRIBUTING.md`, `SECURITY.md`, `SUPPORT.md`
- **All contributors** recognition
- **Hacktoberfest** ready badges se aplic√°vel
- **Issue templates** mencionados
- **Discussion templates** para RFCs

**CALL-TO-ACTION ESSENCIAIS:**
- ‚≠ê "Star this repo if it helped you!"
- üêõ "Found a bug? Open an issue!"
- üí° "Have an idea? Start a discussion!"
- ü§≤ "Want to contribute? Check our good first issues!"

**Gere um README que construa comunidade e inspire contribui√ß√µes.**
"""
}

# Prompt legado para compatibilidade (ser√° removido em vers√µes futuras)
PROMPT_README_GENERATION = PROMPTS["profissional"]
